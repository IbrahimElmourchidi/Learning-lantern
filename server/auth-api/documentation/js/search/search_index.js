var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.169,1,1.952]],["body/modules/AppModule.html",[0,1.682,1,3.554,2,1.55,3,2.038,4,2.808,5,2.808,6,2.853,7,0.037,8,2.505,9,1.905,10,1.905,11,0.455,12,0.455,13,0.397,14,3.394,15,2.808,16,0.874,17,0.646,18,3.394,19,3.137,20,1.905,21,2.808,22,2.423,23,4.463,24,3.394,25,2.038,26,3.394,27,0.761,28,3.394,29,3.394,30,3.394,31,3.394,32,3.394,33,3.394,34,3.394,35,1.55,36,3.394,37,2.423,38,2.423,39,1.406,40,2.135,41,0.964,42,3.394,43,3.394,44,3.394,45,3.394,46,3.394,47,2.135,48,0.455,49,0.241,50,0.026,51,0.026]],["title/modules/AuthModule.html",[0,1.169,52,1.742]],["body/modules/AuthModule.html",[0,1.572,2,1.402,3,1.906,6,2.107,7,0.037,8,2.343,9,1.723,10,1.723,11,0.411,12,0.411,13,0.36,15,1.931,16,0.867,17,0.584,19,2.983,20,1.723,37,2.192,38,2.192,39,1.272,40,1.931,48,0.411,49,0.218,50,0.025,51,0.025,52,3.319,53,2.54,54,2.54,55,2.54,56,3.345,57,2.771,58,3.081,59,3.07,60,2.979,61,3.454,62,4.173,63,3.07,64,2.192,65,2.54,66,4.173,67,1.931,68,3.07,69,3.07,70,3.07,71,3.07,72,3.07,73,3.07,74,1.55,75,3.07,76,3.07,77,2.54,78,3.07,79,3.07,80,3.07,81,2.192]],["title/injectables/AuthService.html",[56,1.742,82,0.882]],["body/injectables/AuthService.html",[7,0.037,11,0.36,12,0.36,13,0.314,16,0.729,17,0.511,27,0.865,39,1.83,41,1.255,48,0.36,49,0.191,50,0.022,51,0.022,56,2.135,64,1.917,74,2.733,82,1.081,83,1.356,84,2.222,85,0.649,86,2.392,87,2.135,88,3.803,89,3.803,90,3.803,91,0.763,92,1.92,93,3.153,94,3.803,95,3.803,96,2.479,97,2.685,98,5.264,99,1.83,100,2.685,101,2.016,102,1.83,103,2.016,104,2.135,105,3.803,106,3.803,107,3.803,108,5.264,109,2.685,110,4.803,111,3.619,112,2.135,113,2.715,114,1.304,115,1.99,116,2.778,117,3.803,118,2.685,119,2.392,120,2.685,121,2.685,122,1.83,123,1.113,124,1.917,125,2.685,126,1.304,127,2.685,128,1.689,129,2.685,130,2.222,131,2.685,132,1.689,133,2.685]],["title/interfaces/ClassConstructor.html",[114,1.064,134,1.286]],["body/interfaces/ClassConstructor.html",[7,0.037,11,0.392,12,0.392,13,0.342,16,0.756,17,0.556,35,1.842,48,0.541,49,0.286,50,0.024,51,0.024,85,0.498,87,1.64,112,2.265,113,2.086,114,1.585,115,1.211,122,1.211,123,1.211,126,1.709,134,2.065,135,1.838,136,1.64,137,1.838,138,2.037,139,1.842,140,2.538,141,1.842,142,2.333,143,2.265,144,2.538,145,2.538,146,1.838,147,2.538,148,1.64,149,1.838,150,1.838,151,1.838,152,1.475,153,1.101,154,1.838,155,1.64,156,2.086,157,2.333,158,1.475,159,2.086,160,1.838,161,2.418,162,1.64,163,2.418,164,1.838,165,2.11,166,1.838,167,1.838,168,1.334,169,1.842,170,1.838,171,1.838,172,1.838,173,1.838,174,2.538,175,2.538,176,3.339,177,3.339,178,3.339,179,2.418,180,2.418,181,2.418]],["title/interfaces/ClassConstructor-1.html",[114,0.894,134,1.08,182,1.861]],["body/interfaces/ClassConstructor-1.html",[7,0.037,11,0.438,12,0.438,13,0.383,16,0.793,17,0.623,27,0.558,35,1.494,48,0.584,49,0.309,50,0.026,51,0.026,85,0.558,112,2.445,114,1.122,123,1.356,126,1.68,134,2.164,135,2.058,138,2.2,139,1.989,140,2.74,141,1.494,142,1.652,143,2.445,144,2.74,145,2.74,146,2.058,147,2.74,148,1.837,149,2.058,150,2.058,151,2.058,152,1.652,153,1.233,154,2.058,155,1.837,157,1.652,158,1.652,160,2.058,162,2.749,164,2.058,165,1.989,168,1.494,169,1.989,170,2.058,171,2.058,172,2.058,173,2.058,174,2.058,175,2.058,183,2.058,184,3.605,185,1.837,186,2.336,187,2.708,188,2.058]],["title/injectables/JwtGuard.html",[57,1.567,82,0.882]],["body/injectables/JwtGuard.html",[7,0.036,11,0.553,12,0.553,13,0.483,16,0.767,17,0.785,48,0.553,49,0.293,50,0.03,51,0.03,57,2.55,65,3.412,67,2.594,74,2.55,82,1.435,83,2.082,85,0.703,87,2.835,189,3.412,190,2.835,191,3.606,192,2.835,193,3.606,194,3.606,195,3.412,196,4.124]],["title/injectables/JwtStrategy.html",[58,1.742,82,0.882]],["body/injectables/JwtStrategy.html",[7,0.037,11,0.396,12,0.396,13,0.346,16,0.76,17,0.562,19,3.149,20,1.658,27,0.693,39,1.926,40,2.924,41,1.155,48,0.396,49,0.21,50,0.024,51,0.024,58,2.282,67,1.858,74,2.651,77,2.444,82,1.155,83,1.491,85,0.504,91,0.839,92,2.052,96,2.609,99,1.684,101,1.856,102,1.684,103,1.856,104,2.282,111,3.318,115,1.684,122,1.684,123,1.224,126,1.013,192,2.282,195,2.444,197,2.444,198,2.902,199,5.25,200,4.065,201,3.364,202,3.364,203,2.954,204,2.954,205,4.065,206,3.846,207,4.065,208,2.954,209,4.065,210,4.065,211,4.065,212,4.065,213,4.065,214,2.954,215,2.954,216,2.444,217,2.954,218,2.954,219,2.954,220,2.954,221,2.954,222,1.858,223,2.954]],["title/modules/MailModule.html",[0,1.169,224,1.742]],["body/modules/MailModule.html",[0,1.609,2,1.451,3,1.95,7,0.037,8,2.398,9,1.783,10,1.783,11,0.426,12,0.426,13,0.372,15,1.998,16,0.817,17,0.605,19,3.035,20,1.783,27,0.542,37,2.268,38,2.268,39,1.316,40,1.998,41,0.903,48,0.426,49,0.226,50,0.025,51,0.025,60,3.049,61,3.535,86,1.998,153,1.197,222,1.998,224,3.18,225,2.629,226,2.629,227,2.629,228,3.363,229,3.177,230,2.268,231,2.398,232,1.998,233,4.271,234,3.177,235,3.177,236,3.177,237,3.177,238,3.177,239,2.629,240,3.177,241,3.177,242,3.177,243,3.177,244,3.177,245,3.177,246,3.177,247,3.177,248,3.177,249,2.268,250,2.268,251,2.629,252,3.177,253,3.177,254,3.177,255,3.177,256,3.177]],["title/injectables/MailService.html",[82,0.882,228,1.742]],["body/injectables/MailService.html",[7,0.037,11,0.335,12,0.335,13,0.293,16,0.549,17,0.476,27,0.724,39,1.759,41,1.027,48,0.335,49,0.178,50,0.021,51,0.021,82,1.027,83,1.263,85,0.616,86,2.925,87,2.029,91,1.027,92,1.825,96,1.404,99,1.927,101,1.65,102,1.498,103,1.65,104,2.61,115,1.498,119,2.274,122,1.927,123,1.036,126,0.858,128,2.925,153,0.942,165,1.142,166,2.274,228,2.029,230,2.58,231,2.382,232,1.573,249,1.785,250,1.785,251,2.991,257,2.069,258,4.65,259,3.256,260,4.244,261,2.501,262,4.65,263,2.501,264,4.932,265,3.614,266,2.501,267,3.104,268,4.646,269,2.501,270,2.991,271,3.614,272,4.65,273,2.123,274,2.925,275,3.614,276,2.069,277,2.501,278,2.501,279,2.501,280,2.501,281,2.501,282,2.501,283,2.501,284,2.501,285,2.501,286,2.501,287,2.501,288,2.069,289,2.501,290,2.501,291,2.501,292,3.614,293,2.501,294,2.501,295,3.614,296,2.501]],["title/interfaces/PayloadI.html",[114,1.064,116,1.952]],["body/interfaces/PayloadI.html",[7,0.036,11,0.694,12,0.576,13,0.504,48,0.576,50,0.03,51,0.03,74,2.172,85,0.734,111,3.071,114,1.778,116,3.26,128,2.706,130,3.56,132,2.706,135,2.706,169,2.54,193,3.071,198,3.071,267,2.909,297,3.56,298,2.706]],["title/entities/Profile.html",[25,1.417,299,1.742]],["body/entities/Profile.html",[7,0.037,11,0.354,12,0.354,13,0.309,16,0.664,25,2.176,27,1.006,41,1.487,47,1.661,48,0.354,49,0.311,50,0.022,51,0.022,81,2.682,85,0.45,91,0.75,99,1.975,102,1.813,139,1.205,168,1.205,185,1.482,222,2.998,267,2.675,273,1.997,299,2.109,300,2.184,301,3.757,302,3.403,303,2.364,304,2.364,305,3.944,306,3.944,307,3.403,308,3.109,309,3.944,310,3.757,311,2.64,312,3.757,313,2.675,314,3.62,315,2.64,316,3.757,317,2.64,318,3.109,319,3.757,320,2.64,321,3.757,322,2.64,323,3.757,324,3.757,325,3.109,326,3.62,327,2.184,328,3.109,329,1.661,330,3.757,331,2.64,332,2.64,333,3.109,334,2.64,335,3.757,336,3.757,337,4.375,338,2.64,339,2.64,340,2.64,341,2.64,342,2.64,343,2.64,344,2.64,345,2.64,346,2.64,347,2.64]],["title/guards/RoleGuard.html",[190,1.742,348,1.952]],["body/guards/RoleGuard.html",[7,0.037,11,0.317,12,0.317,13,0.277,16,0.687,17,0.45,27,0.93,35,1.08,39,1.704,41,1.168,48,0.317,49,0.168,50,0.02,51,0.02,82,0.986,85,0.592,91,0.672,92,1.753,93,3.234,96,2.308,99,1.704,101,1.877,102,1.704,103,1.877,104,2.542,115,1.877,119,2.183,122,1.999,123,0.98,124,3.234,126,1.41,143,2.542,168,1.08,190,1.948,191,3.234,192,2.308,194,3.234,288,2.872,298,2.183,303,2.183,313,2.83,348,2.183,349,2.365,350,1.957,351,3.471,352,3.471,353,4.792,354,4.529,355,3.471,356,2.365,357,5.21,358,3,359,2.365,360,3.471,361,2.849,362,3.471,363,3.471,364,2.365,365,3.471,366,2.478,367,3.471,368,2.365,369,3.471,370,3.471,371,3.471,372,3.471,373,1.957,374,1.488,375,1.689,376,1.689,377,1.689,378,2.365,379,2.365,380,2.365,381,2.365,382,2.365,383,2.365,384,2.365,385,2.365,386,2.365,387,2.365]],["title/classes/SerializeInterceptor.html",[49,0.22,188,1.952]],["body/classes/SerializeInterceptor.html",[7,0.037,11,0.438,12,0.438,13,0.383,16,0.793,17,0.623,27,0.743,35,1.494,48,0.584,49,0.309,50,0.026,51,0.026,85,0.558,112,1.837,114,1.122,123,1.356,126,1.68,134,2.029,138,1.652,139,1.494,140,2.058,141,1.989,142,1.652,143,2.445,144,2.74,145,3.081,146,2.058,147,2.74,148,1.837,149,2.058,150,2.058,151,2.058,152,1.652,153,1.233,154,2.058,155,1.837,157,1.652,158,1.652,160,2.058,162,2.445,164,2.74,165,2.236,168,1.989,169,1.989,170,2.058,171,2.058,172,2.058,173,2.058,174,2.058,175,2.058,183,2.058,184,2.708,185,1.837,186,2.336,187,2.708,188,2.74,388,2.058]],["title/classes/SerializePaginatedInterceptor.html",[49,0.22,167,1.952]],["body/classes/SerializePaginatedInterceptor.html",[7,0.037,11,0.388,12,0.388,13,0.339,16,0.754,17,0.552,35,1.832,48,0.538,49,0.285,50,0.024,51,0.024,85,0.494,87,2.252,112,1.627,113,2.865,114,1.376,115,1.201,122,1.201,123,1.201,126,1.704,134,1.907,136,1.627,137,1.824,138,1.464,139,1.324,140,1.824,141,1.324,142,2.026,143,2.252,144,2.524,145,2.895,146,1.824,147,2.524,148,1.627,149,1.824,150,1.824,151,1.824,152,1.464,153,1.092,154,1.824,155,1.627,156,2.069,157,2.508,158,1.464,159,2.069,160,1.824,161,2.399,162,2.252,163,3.32,164,2.524,165,2.268,166,2.524,167,2.524,168,1.832,169,1.832,170,1.824,171,1.824,172,1.824,173,1.824,174,2.524,175,2.524,176,3.32,177,3.32,178,3.32,179,2.399,180,2.399,181,2.399,388,1.824]],["title/entities/User.html",[27,0.529,299,1.742]],["body/entities/User.html",[7,0.037,11,0.257,12,0.257,13,0.225,16,0.619,25,2.012,27,0.897,35,1.355,41,1.564,47,1.208,48,0.257,49,0.136,50,0.017,51,0.017,81,2.118,85,0.328,91,1.159,99,2.078,132,2.28,138,0.97,139,0.877,165,1.355,168,0.877,169,0.877,191,2.118,198,2.118,222,3.566,259,2.951,267,2.816,268,2.455,273,2.012,274,1.866,298,2.565,299,2.289,302,2.118,303,1.866,304,1.866,307,3.581,308,3.374,309,4.019,313,2.615,314,1.589,318,2.455,325,2.455,326,4.019,327,2.455,328,2.455,329,1.208,333,4.019,353,3.647,374,2.28,375,1.371,389,1.589,390,3.625,391,3,392,3.146,393,3,394,4.077,395,1.921,396,1.921,397,2.455,398,2.967,399,1.921,400,3.625,401,2.967,402,1.921,403,1.921,404,1.921,405,2.967,406,3.855,407,1.921,408,2.967,409,2.967,410,2.455,411,1.921,412,2.967,413,1.921,414,2.967,415,2.967,416,2.967,417,2.967,418,2.967,419,2.967,420,4.077,421,1.921,422,1.921,423,2.455,424,2.967,425,1.921,426,1.921,427,2.967,428,2.967,429,2.967,430,2.967,431,2.455,432,1.921,433,1.921,434,1.921,435,3.625,436,3.625,437,1.921,438,1.921,439,1.921,440,1.589,441,1.921,442,1.921]],["title/controllers/UserController.html",[443,1.952,444,1.952]],["body/controllers/UserController.html",[7,0.037,11,0.173,12,0.173,13,0.151,16,0.823,17,0.246,27,0.887,39,2.348,41,1.23,48,0.173,49,0.092,50,0.013,51,0.013,57,0.652,85,0.22,91,0.367,92,1.089,93,1.539,96,0.725,99,1.922,101,2.119,102,2.019,103,2.119,115,1.922,119,3.41,122,0.535,124,2.572,126,1.591,136,0.725,141,0.985,153,1.221,193,1.539,202,1.784,231,0.725,259,2.604,273,1.886,274,2.038,276,1.784,307,3.312,329,1.356,348,1.356,358,1.558,361,0.813,366,0.922,374,0.813,375,0.922,377,0.922,392,2.313,397,1.784,440,1.784,443,1.746,444,1.356,445,1.069,446,1.069,447,1.292,448,2.156,449,2.156,450,2.775,451,2.156,452,2.775,453,2.775,454,2.156,455,2.681,456,2.156,457,2.775,458,2.156,459,1.292,460,3.72,461,5.132,462,2.156,463,1.292,464,3.582,465,1.292,466,2.681,467,1.292,468,2.681,469,2.156,470,1.292,471,3.221,472,1.292,473,1.292,474,1.784,475,1.292,476,2.681,477,1.292,478,1.292,479,2.775,480,1.292,481,3.582,482,2.156,483,1.292,484,1.292,485,1.292,486,1.784,487,1.784,488,2.297,489,1.292,490,1.292,491,1.292,492,2.156,493,1.292,494,2.156,495,1.292,496,1.292,497,1.292,498,1.292,499,2.156,500,1.292,501,3.221,502,2.156,503,1.292,504,1.292,505,2.681,506,2.156,507,1.292,508,2.156,509,1.292,510,2.775,511,1.069,512,1.292,513,1.292,514,1.292,515,1.292,516,1.069,517,1.292,518,1.292,519,1.292,520,0.922,521,1.292,522,1.292,523,1.292,524,1.292,525,1.292,526,1.292,527,1.069,528,1.292,529,0.813,530,1.292,531,0.922,532,1.292,533,1.292,534,1.292,535,1.292,536,1.069,537,1.069,538,1.089,539,1.784,540,0.813,541,1.069,542,1.292,543,1.292,544,3.602,545,1.292,546,1.292,547,1.292,548,1.292,549,1.292,550,1.292,551,1.292,552,3.602,553,1.292,554,1.292,555,1.292,556,1.292,557,1.292,558,2.156,559,1.292,560,1.292,561,1.292,562,1.292,563,1.292,564,1.292,565,2.156,566,1.292,567,1.292,568,1.292,569,1.292,570,1.292,571,1.292,572,2.156,573,2.156,574,1.292,575,1.292,576,1.292,577,2.156,578,1.292,579,1.292,580,1.292,581,2.156,582,1.292,583,1.292,584,1.292,585,1.292,586,1.292,587,1.292,588,1.292,589,1.292,590,1.292,591,1.292]],["title/injectables/UserHelperService.html",[82,0.882,538,1.567]],["body/injectables/UserHelperService.html",[0,0.937,7,0.037,11,0.206,12,0.206,13,0.18,16,0.792,17,0.293,27,0.424,41,1.202,48,0.206,49,0.109,50,0.015,51,0.015,82,0.707,83,0.776,85,0.262,86,2.265,91,0.437,92,1.256,99,1.753,101,1.932,102,1.753,103,1.932,104,2.97,115,2.126,122,1.753,126,1.451,138,1.256,139,1.136,157,2.672,158,1.818,192,2.021,194,3.663,201,2.058,259,1.396,273,0.702,305,2.058,306,2.058,376,3.18,392,2.57,393,1.272,431,2.058,460,3.502,464,2.979,466,3.502,468,2.058,471,2.979,476,3.502,501,3.502,505,2.979,527,1.272,536,1.272,538,1.256,540,2.802,592,1.272,593,3.6,594,2.487,595,2.487,596,4.57,597,4.379,598,2.487,599,2.487,600,2.487,601,2.487,602,2.487,603,2.487,604,2.487,605,1.537,606,4.246,607,3.954,608,2.487,609,1.537,610,3.954,611,2.487,612,1.537,613,3.954,614,2.487,615,1.537,616,2.487,617,2.487,618,2.487,619,2.487,620,2.058,621,2.487,622,2.487,623,2.058,624,2.487,625,2.487,626,2.487,627,2.487,628,3.133,629,2.487,630,1.537,631,3.954,632,2.487,633,1.537,634,2.487,635,3.954,636,1.537,637,1.537,638,1.537,639,1.537,640,1.537,641,1.537,642,1.537,643,1.537,644,1.537,645,1.537,646,1.537,647,1.537,648,1.537,649,1.537,650,1.537,651,1.537,652,1.537,653,2.487,654,3.6,655,2.487,656,2.487,657,1.537,658,1.537,659,1.537,660,1.537,661,1.537,662,1.537]],["title/modules/UserModule.html",[0,1.169,6,1.567]],["body/modules/UserModule.html",[0,1.613,2,1.455,3,1.954,6,3.026,7,0.037,8,2.402,9,1.788,10,1.788,11,0.427,12,0.427,13,0.373,15,2.692,16,0.895,17,0.607,21,2.637,22,2.275,25,1.954,27,0.543,48,0.427,49,0.226,50,0.025,51,0.025,52,3.115,60,3.055,224,3.115,230,2.275,231,1.788,232,2.004,358,3.115,377,2.275,444,3.04,445,3.541,537,2.637,538,2.802,539,3.541,540,2.004,541,2.637,663,2.637,664,3.186,665,2.637,666,3.186,667,3.186,668,3.186,669,3.186,670,3.186,671,3.186]],["title/classes/UserSerializeDto.html",[49,0.22,529,1.952]],["body/classes/UserSerializeDto.html",[7,0.037,11,0.512,12,0.512,13,0.447,16,0.731,25,2.409,27,0.821,48,0.512,49,0.342,50,0.028,51,0.028,85,0.652,132,2.404,152,1.929,165,2.2,169,2.529,267,2.145,273,1.745,298,3.03,388,2.404,391,3.162,529,3.03,531,2.728,596,3.986,606,3.986,672,3.162,673,3.162,674,4.817,675,5.71,676,3.821,677,3.821,678,3.821]],["title/coverage.html",[679,3.479]],["body/coverage.html",[7,0.036,13,0.355,25,1.382,27,0.516,41,0.86,49,0.334,50,0.024,51,0.024,56,1.699,57,1.528,58,1.699,82,1.553,84,2.505,114,1.615,116,1.904,134,1.713,136,2.642,137,2.961,141,1.382,153,1.141,158,2.377,167,1.904,183,2.961,188,1.904,189,2.505,190,1.699,197,2.505,228,1.699,257,2.505,297,2.505,299,2.32,300,2.505,302,2.161,348,1.904,350,2.505,358,1.699,361,1.904,376,2.951,389,2.505,443,1.904,444,1.904,446,2.505,520,2.161,529,1.904,531,2.161,538,1.528,540,1.904,592,2.505,672,2.505,673,2.505,679,2.505,680,2.505,681,3.027,682,3.027,683,6.161,684,5.985,685,4.134,686,2.505,687,3.027,688,4.134,689,2.505,690,2.505,691,3.027,692,3.027,693,3.027,694,3.027,695,3.027]],["title/dependencies.html",[3,1.7,696,2.157]],["body/dependencies.html",[3,1.68,7,0.037,17,0.701,20,2.065,22,2.627,49,0.334,50,0.028,51,0.028,64,2.627,67,2.315,74,1.858,148,2.065,152,1.858,216,3.045,231,2.64,232,2.315,329,2.959,373,3.045,516,3.045,697,3.679,698,5.184,699,3.679,700,3.679,701,3.679,702,3.679,703,3.679,704,3.679,705,3.679,706,3.679,707,3.679,708,3.679,709,3.679,710,3.679,711,3.679,712,3.679,713,3.679,714,3.679,715,3.679,716,3.679,717,3.679,718,3.679,719,3.679,720,3.679,721,3.679,722,3.045,723,3.679,724,3.679,725,3.679,726,3.679,727,3.679]],["title/miscellaneous/enumerations.html",[728,1.316,729,3.081]],["body/miscellaneous/enumerations.html",[7,0.034,50,0.032,51,0.032,91,1.305,182,3.278,206,3.799,374,3.389,410,3.799,728,2.318,729,3.799,730,4.591,731,4.591,732,3.799,733,4.591,734,4.591]],["title/miscellaneous/functions.html",[728,1.316,735,3.081]],["body/miscellaneous/functions.html",[7,0.033,41,1.419,50,0.029,51,0.029,91,1.15,101,2.28,102,2.069,103,2.28,134,2.343,136,2.272,137,3.141,141,2.28,142,2.521,155,2.803,156,2.889,157,2.521,159,2.889,162,2.272,183,2.546,185,2.272,186,2.889,520,3.565,689,3.349,690,4.481,728,2.044,735,3.349,736,4.047,737,4.047,738,4.047,739,4.047,740,4.047,741,4.047]],["title/index.html",[91,0.741,742,2.606,743,2.606]],["body/index.html",[7,0.032,27,0.916,50,0.027,51,0.027,85,0.779,128,2.21,153,1.324,166,2.21,185,1.972,239,2.908,249,3.259,250,3.259,259,1.972,270,2.908,273,1.604,274,2.21,303,2.21,313,1.972,366,2.509,423,3.778,455,2.908,474,2.908,481,2.908,486,2.908,487,2.908,488,4.197,511,3.778,597,4.197,620,2.908,623,2.908,680,2.908,744,4.566,745,4.566,746,3.514,747,3.514,748,3.514,749,3.514,750,3.514,751,3.514,752,3.514,753,3.514,754,3.514,755,3.514,756,3.514,757,3.514,758,3.514,759,4.566,760,3.514,761,5.072,762,3.514,763,3.514,764,3.514,765,3.514,766,3.514,767,3.514,768,3.514,769,3.514,770,3.514,771,3.514,772,3.514,773,3.514,774,3.514,775,3.514,776,3.514,777,3.514,778,4.566,779,4.566,780,3.514,781,3.514]],["title/modules.html",[2,1.92]],["body/modules.html",[1,2.806,2,2.037,6,2.252,7,0.031,50,0.031,51,0.031,52,2.504,224,2.504,782,5.843,783,5.843,784,5.843,785,5.843]],["title/overview.html",[786,3.479]],["body/overview.html",[1,3.329,2,1.545,3,2.034,4,2.8,5,2.8,6,3.035,7,0.036,8,2.5,9,1.899,10,1.899,47,2.128,50,0.026,51,0.026,52,3.348,53,2.8,54,2.8,55,2.8,56,3.23,57,2.514,58,2.795,83,1.708,135,2.128,182,3.18,190,1.899,224,3.169,225,2.8,226,2.8,227,2.8,228,3.23,358,2.795,388,2.128,443,2.128,538,2.514,663,2.8,665,2.8,786,2.8,787,3.383,788,3.383,789,3.383,790,4.454]],["title/properties.html",[304,2.342,696,2.157]],["body/properties.html",[7,0.036,50,0.032,51,0.032,85,0.793,304,2.925,791,4.65,792,4.65,793,4.65,794,4.65,795,4.65]],["title/miscellaneous/variables.html",[728,1.316,796,3.081]],["body/miscellaneous/variables.html",[7,0.034,50,0.031,51,0.031,91,1.262,142,2.243,192,2.493,313,2.493,361,3.749,406,3.676,686,3.676,722,3.676,728,2.243,732,3.676,796,3.676,797,4.442,798,4.442,799,4.442,800,4.442,801,4.442]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":792,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":182,"title":{"interfaces/ClassConstructor-1.html":{}},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1.6.1",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["128",{"_index":401,"title":{},"body":{"entities/User.html":{}}}],["17.6.0",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":788,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["21/21",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":790,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":310,"title":{},"body":{"entities/Profile.html":{}}}],["4",{"_index":787,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{}}}],["5.0.1",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":558,"title":{},"body":{"controllers/UserController.html":{}}}],["6",{"_index":789,"title":{},"body":{"overview.html":{}}}],["6.7.5",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["7.2.0",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":420,"title":{},"body":{"entities/User.html":{}}}],["8.0.0",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["according",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["account",{"_index":397,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{}}}],["account.dto",{"_index":527,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["account.interface",{"_index":647,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["activate",{"_index":365,"title":{},"body":{"guards/RoleGuard.html":{}}}],["adapter",{"_index":254,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":410,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["alist",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowable",{"_index":370,"title":{},"body":{"guards/RoleGuard.html":{}}}],["allowed",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":597,"title":{},"body":{"injectables/UserHelperService.html":{},"index.html":{}}}],["appended",{"_index":286,"title":{},"body":{"injectables/MailService.html":{}}}],["application",{"_index":741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apprach",{"_index":618,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["args",{"_index":154,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["argument",{"_index":184,"title":{},"body":{"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{}}}],["async",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{}}}],["attach",{"_index":210,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth",{"_index":239,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["authenticatin",{"_index":200,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authentication",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":196,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":52,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":795,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice",{"_index":56,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":287,"title":{},"body":{"injectables/MailService.html":{}}}],["await",{"_index":383,"title":{},"body":{"guards/RoleGuard.html":{}}}],["bcrypt",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["before",{"_index":339,"title":{},"body":{"entities/Profile.html":{}}}],["beforeinsert",{"_index":325,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["below",{"_index":762,"title":{},"body":{"index.html":{}}}],["body",{"_index":464,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["boolean",{"_index":298,"title":{},"body":{"interfaces/PayloadI.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"classes/UserSerializeDto.html":{}}}],["bootstrap",{"_index":690,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":272,"title":{},"body":{"injectables/MailService.html":{}}}],["browse",{"_index":785,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":782,"title":{},"body":{"modules.html":{}}}],["callhandler",{"_index":144,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["canactivate",{"_index":354,"title":{},"body":{"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":363,"title":{},"body":{"guards/RoleGuard.html":{}}}],["case",{"_index":436,"title":{},"body":{"entities/User.html":{}}}],["catch",{"_index":291,"title":{},"body":{"injectables/MailService.html":{}}}],["change",{"_index":440,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{}}}],["changedto",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["changeemail",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["changeemail(@body",{"_index":576,"title":{},"body":{"controllers/UserController.html":{}}}],["changeemail(body",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["changeemailinstance",{"_index":577,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassdtotoinstance",{"_index":598,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["changepassdtotoinstance(dto",{"_index":604,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["changepassi",{"_index":607,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["changepassinstance",{"_index":573,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword",{"_index":450,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword(changedto",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassworddto",{"_index":466,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["check",{"_index":191,"title":{},"body":{"injectables/JwtGuard.html":{},"guards/RoleGuard.html":{},"entities/User.html":{}}}],["checks",{"_index":351,"title":{},"body":{"guards/RoleGuard.html":{}}}],["class",{"_index":49,"title":{"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"classes/UserSerializeDto.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":134,"title":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{}},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":388,"title":{},"body":{"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"classes/UserSerializeDto.html":{},"overview.html":{}}}],["clientid",{"_index":242,"title":{},"body":{"modules/MailModule.html":{}}}],["clientsecret",{"_index":244,"title":{},"body":{"modules/MailModule.html":{}}}],["cloud",{"_index":750,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":53,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":54,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":55,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":225,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":227,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":226,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":663,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":664,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":665,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":268,"title":{},"body":{"injectables/MailService.html":{},"entities/User.html":{}}}],["column",{"_index":326,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["column({length",{"_index":425,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":308,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["comming",{"_index":352,"title":{},"body":{"guards/RoleGuard.html":{}}}],["compodocs",{"_index":781,"title":{},"body":{"index.html":{}}}],["config",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{}}}],["config.get('client_id",{"_index":243,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('client_secret",{"_index":245,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('db_sync",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('db_url",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('email",{"_index":241,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('jwt_secret",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.get('refresh_token",{"_index":247,"title":{},"body":{"modules/MailModule.html":{}}}],["configmodule",{"_index":18,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["configschemavalidator",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{}}}],["configure",{"_index":265,"title":{},"body":{"injectables/MailService.html":{}}}],["confirmed",{"_index":408,"title":{},"body":{"entities/User.html":{}}}],["console.log(typeof",{"_index":179,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["const",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{}}}],["constructor",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{}}}],["constructor(config",{"_index":203,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwt",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(mailer",{"_index":261,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(private",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["constructor(reflector",{"_index":356,"title":{},"body":{"guards/RoleGuard.html":{}}}],["contain",{"_index":414,"title":{},"body":{"entities/User.html":{}}}],["contains",{"_index":193,"title":{},"body":{"injectables/JwtGuard.html":{},"interfaces/PayloadI.html":{},"controllers/UserController.html":{}}}],["content",{"_index":752,"title":{},"body":{"index.html":{}}}],["context",{"_index":288,"title":{},"body":{"injectables/MailService.html":{},"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":379,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":380,"title":{},"body":{"guards/RoleGuard.html":{}}}],["controller",{"_index":443,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('user",{"_index":542,"title":{},"body":{"controllers/UserController.html":{}}}],["controller/user.controller",{"_index":669,"title":{},"body":{"modules/UserModule.html":{}}}],["controllers",{"_index":445,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["coverage",{"_index":679,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":474,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["created",{"_index":398,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn",{"_index":430,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn({type",{"_index":395,"title":{},"body":{"entities/User.html":{}}}],["createdto",{"_index":471,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["createinstace",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(@body",{"_index":546,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createdto",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["createuseri",{"_index":628,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["creation",{"_index":753,"title":{},"body":{"index.html":{}}}],["custom",{"_index":155,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["data",{"_index":165,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/MailService.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"classes/UserSerializeDto.html":{}}}],["data['items",{"_index":178,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["database",{"_index":303,"title":{},"body":{"entities/Profile.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"index.html":{}}}],["date",{"_index":394,"title":{},"body":{"entities/User.html":{}}}],["datecreated",{"_index":390,"title":{},"body":{"entities/User.html":{}}}],["dbuser",{"_index":382,"title":{},"body":{"guards/RoleGuard.html":{}}}],["dbuser.role",{"_index":386,"title":{},"body":{"guards/RoleGuard.html":{}}}],["decorator",{"_index":142,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":307,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":406,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":248,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultstrategy",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{}}}],["defaultvaluepipe",{"_index":509,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":555,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":557,"title":{},"body":{"controllers/UserController.html":{}}}],["define",{"_index":301,"title":{},"body":{"entities/Profile.html":{}}}],["defined",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["defines",{"_index":198,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/PayloadI.html":{},"entities/User.html":{}}}],["delete",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('delete",{"_index":580,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteaccount",{"_index":452,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteaccount(body",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteaccountdto",{"_index":476,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["deleteaccountdtotoinstance",{"_index":599,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["deleteaccountdtotoinstance(dto",{"_index":608,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["deleteaccounti",{"_index":610,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["deleteaccountinstance",{"_index":581,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteresult",{"_index":523,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployment",{"_index":775,"title":{},"body":{"index.html":{}}}],["description",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"classes/UserSerializeDto.html":{},"index.html":{},"properties.html":{}}}],["detailed",{"_index":759,"title":{},"body":{"index.html":{}}}],["dir",{"_index":252,"title":{},"body":{"modules/MailModule.html":{}}}],["displayed",{"_index":770,"title":{},"body":{"index.html":{}}}],["docs",{"_index":779,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":680,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":157,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"injectables/UserHelperService.html":{},"miscellaneous/functions.html":{}}}],["dto.newpassword",{"_index":660,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dto.oldpassword",{"_index":658,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dto.useremail",{"_index":653,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dto.userfname",{"_index":655,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dto.userid",{"_index":661,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dto.userlname",{"_index":656,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dto.userpassword",{"_index":654,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dto.validationcode",{"_index":662,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dtos",{"_index":594,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["dtos/user",{"_index":531,"title":{},"body":{"controllers/UserController.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{}}}],["easy",{"_index":748,"title":{},"body":{"index.html":{}}}],["eductaional",{"_index":745,"title":{},"body":{"index.html":{}}}],["email",{"_index":259,"title":{},"body":{"injectables/MailService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"index.html":{}}}],["email.dto",{"_index":536,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["email.interface",{"_index":652,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["email?`id",{"_index":773,"title":{},"body":{"index.html":{}}}],["emailtolower",{"_index":439,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":341,"title":{},"body":{"entities/Profile.html":{}}}],["end",{"_index":623,"title":{},"body":{"injectables/UserHelperService.html":{},"index.html":{}}}],["engine",{"_index":290,"title":{},"body":{"injectables/MailService.html":{}}}],["enter",{"_index":140,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["entered",{"_index":427,"title":{},"body":{"entities/User.html":{}}}],["entities",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"entities/Profile.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/profile.entity",{"_index":676,"title":{},"body":{"classes/UserSerializeDto.html":{}}}],["entity",{"_index":299,"title":{"entities/Profile.html":{},"entities/User.html":{}},"body":{"entities/Profile.html":{},"entities/User.html":{},"coverage.html":{}}}],["entry",{"_index":739,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enumerations",{"_index":729,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envfilepath",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":746,"title":{},"body":{"index.html":{}}}],["environment/.env.${process.env.node_env",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["environment/config.schema",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":292,"title":{},"body":{"injectables/MailService.html":{}}}],["error(mail",{"_index":296,"title":{},"body":{"injectables/MailService.html":{}}}],["excludeextraneousvalues",{"_index":175,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["executioncontext",{"_index":143,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["existing",{"_index":767,"title":{},"body":{"index.html":{}}}],["exists",{"_index":369,"title":{},"body":{"guards/RoleGuard.html":{}}}],["expiresin",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{}}}],["exports",{"_index":61,"title":{},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["expose",{"_index":675,"title":{},"body":{"classes/UserSerializeDto.html":{}}}],["express",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":195,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extension",{"_index":285,"title":{},"body":{"injectables/MailService.html":{}}}],["extra",{"_index":336,"title":{},"body":{"entities/Profile.html":{}}}],["extract",{"_index":360,"title":{},"body":{"guards/RoleGuard.html":{}}}],["extractjwt",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["file",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{}}}],["firstname",{"_index":305,"title":{},"body":{"entities/Profile.html":{},"injectables/UserHelperService.html":{}}}],["fistname",{"_index":312,"title":{},"body":{"entities/Profile.html":{}}}],["flexibility",{"_index":621,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["foreign",{"_index":323,"title":{},"body":{"entities/Profile.html":{}}}],["forwardref",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":423,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["front",{"_index":622,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["function",{"_index":158,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"injectables/UserHelperService.html":{},"coverage.html":{}}}],["functions",{"_index":735,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["generated",{"_index":780,"title":{},"body":{"index.html":{}}}],["generatepayload",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatepayload(user",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('all",{"_index":553,"title":{},"body":{"controllers/UserController.html":{}}}],["get('one/:id",{"_index":561,"title":{},"body":{"controllers/UserController.html":{}}}],["get('resend",{"_index":589,"title":{},"body":{"controllers/UserController.html":{}}}],["getallusers",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["getallusers(page",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["getsingleuser",{"_index":454,"title":{},"body":{"controllers/UserController.html":{}}}],["getsingleuser(@param('id",{"_index":562,"title":{},"body":{"controllers/UserController.html":{}}}],["getsingleuser(id",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":742,"title":{"index.html":{}},"body":{}}],["given",{"_index":166,"title":{},"body":{"interfaces/ClassConstructor.html":{},"injectables/MailService.html":{},"classes/SerializePaginatedInterceptor.html":{},"index.html":{}}}],["gives",{"_index":619,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["gmail",{"_index":238,"title":{},"body":{"modules/MailModule.html":{}}}],["guard",{"_index":190,"title":{"guards/RoleGuard.html":{}},"body":{"injectables/JwtGuard.html":{},"guards/RoleGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":349,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt.guard",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{}}}],["handlebars",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":233,"title":{},"body":{"modules/MailModule.html":{}}}],["hbs",{"_index":284,"title":{},"body":{"injectables/MailService.html":{}}}],["helper",{"_index":593,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["helper.service",{"_index":541,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["helper.service.ts",{"_index":592,"title":{},"body":{"injectables/UserHelperService.html":{},"coverage.html":{}}}],["helper.service.ts:32",{"_index":615,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["helper.service.ts:47",{"_index":630,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["helper.service.ts:61",{"_index":612,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["helper.service.ts:73",{"_index":605,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["helper.service.ts:85",{"_index":609,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["helper.service.ts:95",{"_index":633,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["helper/user",{"_index":540,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["here",{"_index":778,"title":{},"body":{"index.html":{}}}],["heroku",{"_index":777,"title":{},"body":{"index.html":{}}}],["hosted",{"_index":776,"title":{},"body":{"index.html":{}}}],["http",{"_index":763,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/user/all",{"_index":560,"title":{},"body":{"controllers/UserController.html":{}}}],["i.profile",{"_index":180,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["id",{"_index":273,"title":{},"body":{"injectables/MailService.html":{},"entities/Profile.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"classes/UserSerializeDto.html":{},"index.html":{}}}],["identifier",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":169,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"interfaces/PayloadI.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"classes/UserSerializeDto.html":{}}}],["ignoreexpiration",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":168,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{}}}],["import",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{}}}],["imports",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":91,"title":{"index.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index()@column({nullable",{"_index":399,"title":{},"body":{"entities/User.html":{}}}],["index()@primarygeneratedcolumn('uuid",{"_index":403,"title":{},"body":{"entities/User.html":{}}}],["info",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{}}}],["information",{"_index":760,"title":{},"body":{"index.html":{}}}],["inject",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["injectable",{"_index":82,"title":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/UserHelperService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"injectables/UserHelperService.html":{},"coverage.html":{}}}],["injectables",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/UserHelperService.html":{},"overview.html":{}}}],["insert",{"_index":340,"title":{},"body":{"entities/Profile.html":{}}}],["inside",{"_index":617,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["instructor",{"_index":733,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["integrated",{"_index":747,"title":{},"body":{"index.html":{}}}],["intercept(context",{"_index":170,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["interceptor",{"_index":162,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["interface",{"_index":114,"title":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"interfaces/PayloadI.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"interfaces/PayloadI.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":135,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"interfaces/PayloadI.html":{},"overview.html":{}}}],["interfaces/profile.interface",{"_index":331,"title":{},"body":{"entities/Profile.html":{}}}],["interfaces/user.interface",{"_index":432,"title":{},"body":{"entities/User.html":{}}}],["internal",{"_index":294,"title":{},"body":{"injectables/MailService.html":{}}}],["internalservererrorexception",{"_index":275,"title":{},"body":{"injectables/MailService.html":{}}}],["introduction",{"_index":757,"title":{},"body":{"index.html":{}}}],["invoke",{"_index":205,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["isconfirmed",{"_index":391,"title":{},"body":{"entities/User.html":{},"classes/UserSerializeDto.html":{}}}],["isglobal",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["isvalidated",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/PayloadI.html":{},"entities/User.html":{},"classes/UserSerializeDto.html":{}}}],["joi",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["joincolumn",{"_index":327,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["jwt",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/PayloadI.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":57,"title":{"injectables/JwtGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtmodule",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":58,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":324,"title":{},"body":{"entities/Profile.html":{}}}],["lantern",{"_index":250,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"index.html":{}}}],["lantern.com",{"_index":280,"title":{},"body":{"injectables/MailService.html":{}}}],["last",{"_index":319,"title":{},"body":{"entities/Profile.html":{}}}],["lastname",{"_index":306,"title":{},"body":{"entities/Profile.html":{},"injectables/UserHelperService.html":{}}}],["learing",{"_index":279,"title":{},"body":{"injectables/MailService.html":{}}}],["learning",{"_index":249,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"index.html":{}}}],["length",{"_index":309,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["letter",{"_index":417,"title":{},"body":{"entities/User.html":{}}}],["letter+lowercase",{"_index":416,"title":{},"body":{"entities/User.html":{}}}],["leveraging",{"_index":755,"title":{},"body":{"index.html":{}}}],["license",{"_index":793,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":481,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["link",{"_index":761,"title":{},"body":{"index.html":{}}}],["list",{"_index":371,"title":{},"body":{"guards/RoleGuard.html":{}}}],["load",{"_index":212,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logic",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":455,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["login(@body",{"_index":568,"title":{},"body":{"controllers/UserController.html":{}}}],["login(logindto",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["logindto",{"_index":460,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["logindtotoinstance",{"_index":600,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["logindtotoinstance(dto",{"_index":611,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["logini",{"_index":613,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["logininstance",{"_index":569,"title":{},"body":{"controllers/UserController.html":{}}}],["lower",{"_index":435,"title":{},"body":{"entities/User.html":{}}}],["mailer",{"_index":264,"title":{},"body":{"injectables/MailService.html":{}}}],["mailermodule",{"_index":230,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/UserModule.html":{}}}],["mailermodule.forrootasync",{"_index":236,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":262,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":224,"title":{"modules/MailModule.html":{}},"body":{"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":228,"title":{"injectables/MailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["make",{"_index":334,"title":{},"body":{"entities/Profile.html":{}}}],["makes",{"_index":138,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"injectables/UserHelperService.html":{}}}],["many",{"_index":769,"title":{},"body":{"index.html":{}}}],["map",{"_index":149,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["map((data",{"_index":173,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["matching",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchroles",{"_index":355,"title":{},"body":{"guards/RoleGuard.html":{}}}],["matchroles(roleslist",{"_index":367,"title":{},"body":{"guards/RoleGuard.html":{}}}],["means",{"_index":424,"title":{},"body":{"entities/User.html":{}}}],["metadata",{"_index":722,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadate",{"_index":362,"title":{},"body":{"guards/RoleGuard.html":{}}}],["method",{"_index":209,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["minimum",{"_index":419,"title":{},"body":{"entities/User.html":{}}}],["miscellaneous",{"_index":728,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["model/dtos/changepassword.dto",{"_index":525,"title":{},"body":{"controllers/UserController.html":{}}}],["model/dtos/delete",{"_index":526,"title":{},"body":{"controllers/UserController.html":{}}}],["model/dtos/login.dto",{"_index":528,"title":{},"body":{"controllers/UserController.html":{}}}],["model/dtos/serialize",{"_index":530,"title":{},"body":{"controllers/UserController.html":{}}}],["model/dtos/signup.dto",{"_index":533,"title":{},"body":{"controllers/UserController.html":{}}}],["model/dtos/update.dto",{"_index":534,"title":{},"body":{"controllers/UserController.html":{}}}],["model/dtos/validate",{"_index":535,"title":{},"body":{"controllers/UserController.html":{}}}],["model/entities/profile.entity",{"_index":670,"title":{},"body":{"modules/UserModule.html":{}}}],["model/entities/user.entity",{"_index":537,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["model/interfaces/payload.interface",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["modify",{"_index":627,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":232,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":234,"title":{},"body":{"modules/MailModule.html":{}}}],["more",{"_index":620,"title":{},"body":{"injectables/UserHelperService.html":{},"index.html":{}}}],["name",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"miscellaneous/functions.html":{}}}],["name.interface",{"_index":650,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["names",{"_index":338,"title":{},"body":{"entities/Profile.html":{}}}],["need",{"_index":626,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["nestinterceptor",{"_index":145,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["nestjs",{"_index":231,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":373,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["new",{"_index":153,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["newpass",{"_index":659,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["next",{"_index":171,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["next.2",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["next.handle().pipe",{"_index":172,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["nodemailer",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["note",{"_index":774,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":333,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["number",{"_index":313,"title":{},"body":{"entities/Profile.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":418,"title":{},"body":{"entities/User.html":{}}}],["oauth2",{"_index":240,"title":{},"body":{"modules/MailModule.html":{}}}],["obj",{"_index":677,"title":{},"body":{"classes/UserSerializeDto.html":{}}}],["obj.profile",{"_index":678,"title":{},"body":{"classes/UserSerializeDto.html":{}}}],["object",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["observable",{"_index":147,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["oldpass",{"_index":657,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["onetoone",{"_index":328,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":320,"title":{},"body":{"entities/Profile.html":{}}}],["online",{"_index":744,"title":{},"body":{"index.html":{}}}],["optional",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":255,"title":{},"body":{"modules/MailModule.html":{}}}],["out",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":786,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owns",{"_index":429,"title":{},"body":{"entities/User.html":{}}}],["package",{"_index":696,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":488,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["paginate",{"_index":516,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["paginated",{"_index":487,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["paginated.interceptor",{"_index":521,"title":{},"body":{"controllers/UserController.html":{}}}],["paginated.interceptor.ts",{"_index":137,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["pagination",{"_index":515,"title":{},"body":{"controllers/UserController.html":{}}}],["param",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"classes/SerializePaginatedInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["param('id",{"_index":564,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"miscellaneous/functions.html":{}}}],["parseintpipe",{"_index":510,"title":{},"body":{"controllers/UserController.html":{}}}],["partial",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":392,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["password.interface",{"_index":643,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["pay",{"_index":211,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/PayloadI.html":{}}}],["payloadi",{"_index":116,"title":{"interfaces/PayloadI.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/PayloadI.html":{},"coverage.html":{}}}],["per",{"_index":771,"title":{},"body":{"index.html":{}}}],["pg",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["pk",{"_index":316,"title":{},"body":{"entities/Profile.html":{}}}],["plaintoinstance",{"_index":151,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["plaintoinstance(this.dto",{"_index":174,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["point",{"_index":740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["points",{"_index":764,"title":{},"body":{"index.html":{}}}],["post",{"_index":511,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["post('create",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":494,"title":{},"body":{"controllers/UserController.html":{}}}],["post('validate",{"_index":506,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":314,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":434,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{}}}],["process",{"_index":756,"title":{},"body":{"index.html":{}}}],["profile",{"_index":25,"title":{"entities/Profile.html":{}},"body":{"modules/AppModule.html":{},"entities/Profile.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{}}}],["profile.entity",{"_index":433,"title":{},"body":{"entities/User.html":{}}}],["profile.user",{"_index":438,"title":{},"body":{"entities/User.html":{}}}],["profilei",{"_index":330,"title":{},"body":{"entities/Profile.html":{}}}],["promise",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{}}}],["properties",{"_index":304,"title":{"properties.html":{}},"body":{"entities/Profile.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["providers",{"_index":60,"title":{},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["pug",{"_index":283,"title":{},"body":{"injectables/MailService.html":{}}}],["put",{"_index":512,"title":{},"body":{"controllers/UserController.html":{}}}],["put('change",{"_index":572,"title":{},"body":{"controllers/UserController.html":{}}}],["put('update/:id",{"_index":502,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":513,"title":{},"body":{"controllers/UserController.html":{}}}],["query('limit",{"_index":556,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":554,"title":{},"body":{"controllers/UserController.html":{}}}],["rawdata",{"_index":177,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["readonly",{"_index":276,"title":{},"body":{"injectables/MailService.html":{},"controllers/UserController.html":{}}}],["real",{"_index":428,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":357,"title":{},"body":{"guards/RoleGuard.html":{}}}],["refreshtoken",{"_index":246,"title":{},"body":{"modules/MailModule.html":{}}}],["remove",{"_index":335,"title":{},"body":{"entities/Profile.html":{}}}],["req",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.userid",{"_index":584,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":192,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RoleGuard.html":{},"injectables/UserHelperService.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":381,"title":{},"body":{"guards/RoleGuard.html":{}}}],["resend",{"_index":499,"title":{},"body":{"controllers/UserController.html":{}}}],["resendvalidtion",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["resendvalidtion(@req",{"_index":590,"title":{},"body":{"controllers/UserController.html":{}}}],["resendvalidtion(req",{"_index":496,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["responsible",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"injectables/JwtGuard.html":{},"injectables/MailService.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["result",{"_index":176,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["result.push",{"_index":181,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["results",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["returns",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"classes/SerializePaginatedInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["rimraf",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":353,"title":{},"body":{"guards/RoleGuard.html":{},"entities/User.html":{}}}],["roleguard",{"_index":348,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["roleguard)@get('all",{"_index":484,"title":{},"body":{"controllers/UserController.html":{}}}],["roles",{"_index":361,"title":{},"body":{"guards/RoleGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(rolesenum.admin",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["rolesenum",{"_index":374,"title":{},"body":{"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["rolesenum.student",{"_index":437,"title":{},"body":{"entities/User.html":{}}}],["rolesenum.super",{"_index":550,"title":{},"body":{"controllers/UserController.html":{}}}],["rolesenum.super)@serializepaginated(userserializedto)@useguards(jwtguard",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["roleslist",{"_index":372,"title":{},"body":{"guards/RoleGuard.html":{}}}],["roleslist.includes(role",{"_index":387,"title":{},"body":{"guards/RoleGuard.html":{}}}],["route",{"_index":366,"title":{},"body":{"guards/RoleGuard.html":{},"controllers/UserController.html":{},"index.html":{}}}],["routes",{"_index":448,"title":{},"body":{"controllers/UserController.html":{}}}],["rxjs",{"_index":148,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":150,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["schema",{"_index":596,"title":{},"body":{"injectables/UserHelperService.html":{},"classes/UserSerializeDto.html":{}}}],["secret",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["send",{"_index":270,"title":{},"body":{"injectables/MailService.html":{},"index.html":{}}}],["sending",{"_index":258,"title":{},"body":{"injectables/MailService.html":{}}}],["sendvalidationemail",{"_index":260,"title":{},"body":{"injectables/MailService.html":{}}}],["sendvalidationemail(userid",{"_index":266,"title":{},"body":{"injectables/MailService.html":{}}}],["sensitive",{"_index":164,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["sent",{"_index":289,"title":{},"body":{"injectables/MailService.html":{}}}],["serialization",{"_index":156,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["serialize",{"_index":141,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serialize(dto",{"_index":186,"title":{},"body":{"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{}}}],["serialize(userserializedto",{"_index":544,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize(userserializedto)@get('one/:id",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize(userserializedto)@post('create",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize(userserializedto)@useguards(jwtguard)@delete('delete",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize(userserializedto)@useguards(jwtguard)@put('change",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize.dto",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize.dto.ts",{"_index":673,"title":{},"body":{"classes/UserSerializeDto.html":{},"coverage.html":{}}}],["serializeinterceptor",{"_index":188,"title":{"classes/SerializeInterceptor.html":{}},"body":{"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["serializeinterceptor(dto",{"_index":187,"title":{},"body":{"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{}}}],["serializepaginated",{"_index":520,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serializepaginated(dto",{"_index":159,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{},"miscellaneous/functions.html":{}}}],["serializepaginated(userserializedto",{"_index":551,"title":{},"body":{"controllers/UserController.html":{}}}],["serializepaginatedinterceptor",{"_index":167,"title":{"classes/SerializePaginatedInterceptor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{},"coverage.html":{}}}],["serializepaginatedinterceptor(dto",{"_index":161,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["serializing",{"_index":163,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["serialze",{"_index":674,"title":{},"body":{"classes/UserSerializeDto.html":{}}}],["server",{"_index":295,"title":{},"body":{"injectables/MailService.html":{}}}],["service",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/UserHelperService.html":{}}}],["service/user.service",{"_index":377,"title":{},"body":{"guards/RoleGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["service/user.service.ts",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["services",{"_index":751,"title":{},"body":{"index.html":{}}}],["services/auth.service",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/mail.service",{"_index":235,"title":{},"body":{"modules/MailModule.html":{}}}],["services/user",{"_index":539,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["set",{"_index":749,"title":{},"body":{"index.html":{}}}],["setmetadata('roles",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["short",{"_index":758,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{}}}],["signupdtotoinstance",{"_index":601,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["signupdtotoinstance(dto",{"_index":614,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["single",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["source",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{}}}],["spaces",{"_index":337,"title":{},"body":{"entities/Profile.html":{}}}],["src/.../main.ts",{"_index":736,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../serialize",{"_index":738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../serialize.interceptor.ts",{"_index":737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":14,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module",{"_index":667,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":59,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/guards/jwt.guard",{"_index":517,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":189,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard",{"_index":518,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/guards/role.guard.ts",{"_index":350,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard.ts:10",{"_index":359,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/role.guard.ts:25",{"_index":364,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/role.guard.ts:42",{"_index":368,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/model/decorators/roles.decorator",{"_index":519,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/model/decorators/roles.decorator.ts",{"_index":686,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/model/interfaces/payload.interface.ts",{"_index":297,"title":{},"body":{"interfaces/PayloadI.html":{},"coverage.html":{}}}],["src/auth/services/auth.service.ts",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/services/auth.service.ts:10",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:22",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:34",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":197,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:10",{"_index":204,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:30",{"_index":208,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/mail/mail.module",{"_index":668,"title":{},"body":{"modules/UserModule.html":{}}}],["src/mail/mail.module.ts",{"_index":229,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/services/mail.service.ts",{"_index":257,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/services/mail.service.ts:26",{"_index":269,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/services/mail.service.ts:8",{"_index":263,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/enums/roles.enum",{"_index":375,"title":{},"body":{"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["src/shared/enums/roles.enum.ts",{"_index":731,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/shared/interceptors/serialize",{"_index":136,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializePaginatedInterceptor.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/interceptors/serialize.interceptor",{"_index":522,"title":{},"body":{"controllers/UserController.html":{}}}],["src/shared/interceptors/serialize.interceptor.ts",{"_index":183,"title":{},"body":{"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/controller/user.controller.ts",{"_index":446,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/controller/user.controller.ts:109",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:118",{"_index":478,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:131",{"_index":507,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:139",{"_index":498,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:46",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:56",{"_index":485,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:71",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:77",{"_index":503,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:87",{"_index":495,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controller/user.controller.ts:96",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/model/dtos/changepassword.dto",{"_index":636,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/dtos/delete",{"_index":637,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/dtos/login.dto",{"_index":638,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/dtos/serialize",{"_index":672,"title":{},"body":{"classes/UserSerializeDto.html":{},"coverage.html":{}}}],["src/user/model/dtos/signup.dto",{"_index":639,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/dtos/update.dto",{"_index":640,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/dtos/validate",{"_index":641,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/entities/profile.entity.ts",{"_index":300,"title":{},"body":{"entities/Profile.html":{},"coverage.html":{}}}],["src/user/model/entities/profile.entity.ts:17",{"_index":315,"title":{},"body":{"entities/Profile.html":{}}}],["src/user/model/entities/profile.entity.ts:23",{"_index":311,"title":{},"body":{"entities/Profile.html":{}}}],["src/user/model/entities/profile.entity.ts:29",{"_index":317,"title":{},"body":{"entities/Profile.html":{}}}],["src/user/model/entities/profile.entity.ts:33",{"_index":322,"title":{},"body":{"entities/Profile.html":{}}}],["src/user/model/entities/user.entity",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/model/entities/user.entity.ts",{"_index":389,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/model/entities/user.entity.ts:22",{"_index":404,"title":{},"body":{"entities/User.html":{}}}],["src/user/model/entities/user.entity.ts:30",{"_index":402,"title":{},"body":{"entities/User.html":{}}}],["src/user/model/entities/user.entity.ts:36",{"_index":413,"title":{},"body":{"entities/User.html":{}}}],["src/user/model/entities/user.entity.ts:41",{"_index":396,"title":{},"body":{"entities/User.html":{}}}],["src/user/model/entities/user.entity.ts:47",{"_index":426,"title":{},"body":{"entities/User.html":{}}}],["src/user/model/entities/user.entity.ts:53",{"_index":411,"title":{},"body":{"entities/User.html":{}}}],["src/user/model/entities/user.entity.ts:59",{"_index":407,"title":{},"body":{"entities/User.html":{}}}],["src/user/model/entities/user.entity.ts:65",{"_index":422,"title":{},"body":{"entities/User.html":{}}}],["src/user/model/interfaces/change",{"_index":642,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/interfaces/create",{"_index":644,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/interfaces/delete",{"_index":646,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/interfaces/login.interface",{"_index":648,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/interfaces/update",{"_index":649,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/model/interfaces/validate",{"_index":651,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["src/user/services/user",{"_index":376,"title":{},"body":{"guards/RoleGuard.html":{},"injectables/UserHelperService.html":{},"coverage.html":{}}}],["src/user/user.module",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":666,"title":{},"body":{"modules/UserModule.html":{}}}],["started",{"_index":743,"title":{"index.html":{}},"body":{}}],["statements",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["strategies/jwt.strategy",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":199,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strict",{"_index":256,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":267,"title":{},"body":{"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"entities/Profile.html":{},"entities/User.html":{},"classes/UserSerializeDto.html":{}}}],["student",{"_index":734,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["subject",{"_index":281,"title":{},"body":{"injectables/MailService.html":{}}}],["super",{"_index":206,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["support",{"_index":783,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":139,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"entities/Profile.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{},"injectables/UserHelperService.html":{}}}],["svg",{"_index":784,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":302,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["team",{"_index":624,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["template",{"_index":251,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":253,"title":{},"body":{"modules/MailModule.html":{}}}],["this.email",{"_index":441,"title":{},"body":{"entities/User.html":{}}}],["this.email.tolowercase",{"_index":442,"title":{},"body":{"entities/User.html":{}}}],["this.firstname",{"_index":344,"title":{},"body":{"entities/Profile.html":{}}}],["this.firstname.trim",{"_index":345,"title":{},"body":{"entities/Profile.html":{}}}],["this.generatepayload(user",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.signasync(payload",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lastname",{"_index":346,"title":{},"body":{"entities/Profile.html":{}}}],["this.lastname.trim",{"_index":347,"title":{},"body":{"entities/Profile.html":{}}}],["this.mailer.sendmail",{"_index":278,"title":{},"body":{"injectables/MailService.html":{}}}],["this.matchroles(roles",{"_index":385,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reflector.get('roles",{"_index":378,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.userhelper.changepassdtotoinstance(changedto",{"_index":574,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhelper.deleteaccountdtotoinstance(body",{"_index":582,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhelper.logindtotoinstance(body",{"_index":578,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhelper.logindtotoinstance(logindto",{"_index":570,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhelper.signupdtotoinstance(createdto",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhelper.updatedtotoinstace(updatedto",{"_index":566,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhelper.validatedtotoinstance(validatedto",{"_index":587,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.changeemail(req.user.userid",{"_index":579,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.changepassword(req.user.userid",{"_index":575,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser(createinstace",{"_index":549,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteaccount",{"_index":583,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getallusers",{"_index":559,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(id",{"_index":563,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(user['userid",{"_index":384,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.userservice.login(logininstance",{"_index":571,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.resendvalidation(req.user.id",{"_index":591,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateusername(id",{"_index":567,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.validateemail(validateinstance",{"_index":588,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":293,"title":{},"body":{"injectables/MailService.html":{}}}],["tools",{"_index":754,"title":{},"body":{"index.html":{}}}],["transform",{"_index":606,"title":{},"body":{"injectables/UserHelperService.html":{},"classes/UserSerializeDto.html":{}}}],["transformed",{"_index":595,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["transformer",{"_index":152,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"classes/UserSerializeDto.html":{},"dependencies.html":{}}}],["transport",{"_index":237,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":343,"title":{},"body":{"entities/Profile.html":{}}}],["trimname",{"_index":342,"title":{},"body":{"entities/Profile.html":{}}}],["true",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{},"entities/User.html":{}}}],["try",{"_index":277,"title":{},"body":{"injectables/MailService.html":{}}}],["type",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["typeorm",{"_index":329,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":671,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":421,"title":{},"body":{"entities/User.html":{}}}],["unique",{"_index":400,"title":{},"body":{"entities/User.html":{}}}],["university",{"_index":409,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":794,"title":{},"body":{"properties.html":{}}}],["update",{"_index":468,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["updatedto",{"_index":501,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["updatedtotoinstace",{"_index":602,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["updatedtotoinstace(dto",{"_index":629,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["updateinfoi",{"_index":631,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["updateinstace",{"_index":565,"title":{},"body":{"controllers/UserController.html":{}}}],["updateusername",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["updateusername(updatedto",{"_index":500,"title":{},"body":{"controllers/UserController.html":{}}}],["uppercase",{"_index":415,"title":{},"body":{"entities/User.html":{}}}],["url",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["use",{"_index":185,"title":{},"body":{"interfaces/ClassConstructor-1.html":{},"entities/Profile.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["used",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"guards/RoleGuard.html":{},"injectables/UserHelperService.html":{}}}],["usefactory",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["useguards",{"_index":514,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtguard",{"_index":552,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtguard)@get('resend",{"_index":497,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":146,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["useinterceptors(new",{"_index":160,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/ClassConstructor-1.html":{},"classes/SerializeInterceptor.html":{},"classes/SerializePaginatedInterceptor.html":{}}}],["user",{"_index":27,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor-1.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/Profile.html":{},"guards/RoleGuard.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{},"index.html":{}}}],["user's",{"_index":318,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["user.entity",{"_index":332,"title":{},"body":{"entities/Profile.html":{}}}],["user.interface",{"_index":645,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["user.profile",{"_index":321,"title":{},"body":{"entities/Profile.html":{}}}],["user/all?page=number&limit=number",{"_index":768,"title":{},"body":{"index.html":{}}}],["user/login",{"_index":766,"title":{},"body":{"index.html":{}}}],["user/model/entities/profile.entity",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["user/model/entities/user.entity",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["user/signup",{"_index":765,"title":{},"body":{"index.html":{}}}],["user/user.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["user/validate",{"_index":772,"title":{},"body":{"index.html":{}}}],["user['firstname",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["user['id",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["user['isvalidated",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":444,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":616,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["userfname",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/PayloadI.html":{}}}],["userhelper",{"_index":543,"title":{},"body":{"controllers/UserController.html":{}}}],["userhelperservice",{"_index":538,"title":{"injectables/UserHelperService.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["useri",{"_index":431,"title":{},"body":{"entities/User.html":{},"injectables/UserHelperService.html":{}}}],["userid",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{},"interfaces/PayloadI.html":{},"index.html":{}}}],["usermodule",{"_index":6,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":486,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["userserializedto",{"_index":529,"title":{"classes/UserSerializeDto.html":{}},"body":{"controllers/UserController.html":{},"classes/UserSerializeDto.html":{},"coverage.html":{}}}],["userservice",{"_index":358,"title":{},"body":{"guards/RoleGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":201,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserHelperService.html":{}}}],["uuid",{"_index":405,"title":{},"body":{"entities/User.html":{}}}],["v8",{"_index":524,"title":{},"body":{"controllers/UserController.html":{}}}],["valid",{"_index":194,"title":{},"body":{"injectables/JwtGuard.html":{},"guards/RoleGuard.html":{},"injectables/UserHelperService.html":{}}}],["validate",{"_index":202,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UserController.html":{}}}],["validate(payload",{"_index":207,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":412,"title":{},"body":{"entities/User.html":{}}}],["validatedto",{"_index":508,"title":{},"body":{"controllers/UserController.html":{}}}],["validatedtotoinstance",{"_index":603,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["validatedtotoinstance(dto",{"_index":632,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["validateemail",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["validateemail(@body",{"_index":585,"title":{},"body":{"controllers/UserController.html":{}}}],["validateemail(validatedto",{"_index":504,"title":{},"body":{"controllers/UserController.html":{}}}],["validateemaildto",{"_index":505,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserHelperService.html":{}}}],["validateemaili",{"_index":635,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["validateemialdto",{"_index":634,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["validateinstance",{"_index":586,"title":{},"body":{"controllers/UserController.html":{}}}],["validation",{"_index":274,"title":{},"body":{"injectables/MailService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"index.html":{}}}],["validationcode",{"_index":393,"title":{},"body":{"entities/User.html":{},"injectables/UserHelperService.html":{}}}],["validationschema",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["validtion",{"_index":271,"title":{},"body":{"injectables/MailService.html":{}}}],["value",{"_index":732,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":796,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verfieng",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":791,"title":{},"body":{"properties.html":{}}}],["want",{"_index":625,"title":{},"body":{"injectables/UserHelperService.html":{}}}],["welcome",{"_index":282,"title":{},"body":{"injectables/MailService.html":{}}}],["zoom",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigSchemaValidator } from 'environment/config.schema';\n\nimport { Profile } from './user/model/entities/profile.entity';\nimport { User } from './user/model/entities/user.entity';\nimport { UserModule } from './user/user.module';\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: `environment/.env.${process.env.NODE_ENV}`,\n      validationSchema: ConfigSchemaValidator,\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        type: 'postgres',\n        url: config.get('DB_URL'),\n        synchronize: config.get('DB_SYNC'),\n        entities: [User, Profile],\n      }),\n    }),\n    UserModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthGuard, PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/user/user.module';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { AuthService } from './services/auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        secret: config.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: 5 * 60,\n        },\n      }),\n    }),\n    forwardRef(() => UserModule),\n  ],\n  providers: [JwtStrategy, JwtGuard, AuthService],\n  exports: [PassportModule, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This Service is responsible for all the Authentication & Authorization logic\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generatePayload\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/services/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            the constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the Jwtservice used for generating and verfieng JWT\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePayload(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/auth.service.ts:34\n                \n            \n\n\n            \n                \n                    Generate the Payload object according to the payload interface\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PayloadI\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/auth.service.ts:22\n                \n            \n\n\n            \n                \n                    Generate JWT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/user/model/entities/user.entity';\nimport { PayloadI } from '../model/interfaces/payload.interface';\n\n/**\n * This Service is responsible for all the Authentication & Authorization logic\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * the constructor\n   * @param jwt the Jwtservice used for generating and verfieng JWT\n   */\n  constructor(private jwt: JwtService) {}\n\n  /**\n   * Generate JWT\n   * @param user\n   * @returns\n   */\n  async generateToken(user: Partial): Promise {\n    const payload = this.generatePayload(user);\n    return this.jwt.signAsync(payload);\n  }\n\n  /**\n   *\n   * Generate the Payload object according to the payload interface\n   *\n   * @param user\n   * @returns\n   */\n  private generatePayload(user: Partial): PayloadI {\n    return {\n      userId: user['Id'],\n      userFName: user['FirstName'],\n      isValidated: user['IsValidated'],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassConstructor.html":{"url":"interfaces/ClassConstructor.html","title":"interface - ClassConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClassConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/interceptors/serialize-paginated.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                this interface makes sure that you enter an object to the serialize decorator\n\n            \n\n\n\n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  CallHandler,\n  NestInterceptor,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToInstance } from 'class-transformer';\n\n/**\n * this interface makes sure that you enter an object to the serialize decorator\n */\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\n/**\n * Custom Decorator that do serialization\n *\n * @param dto\n * @returns\n */\nexport function SerializePaginated(dto: ClassConstructor) {\n  return UseInterceptors(new SerializePaginatedInterceptor(dto));\n}\n\n/**\n * this interceptor is responsible for serializing sensitive data according to the given dto\n */\nexport class SerializePaginatedInterceptor implements NestInterceptor {\n  /**@ignore */\n  constructor(private dto: ClassConstructor) {}\n  /**@ignore */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        // return plainToInstance(this.dto, data, {\n        //   excludeExtraneousValues: true,\n        // });\n        let result = [];\n        let rawData = data['items'];\n        for (let i of rawData) {\n          console.log(typeof i.Profile);\n          result.push(\n            plainToInstance(this.dto, i, {\n              excludeExtraneousValues: true,\n            }),\n          );\n        }\n        data['items'] = result;\n        return data;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassConstructor-1.html":{"url":"interfaces/ClassConstructor-1.html","title":"interface - ClassConstructor-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClassConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/interceptors/serialize.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                makes sure you enter object as argument to the interceptor\n\n            \n\n\n\n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  CallHandler,\n  NestInterceptor,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToInstance } from 'class-transformer';\n\n/** makes sure you enter object as argument to the interceptor */\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\n/** custom decorator to use the interceptor */\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\n\n/**\n * serialize user sensitive data\n */\nexport class SerializeInterceptor implements NestInterceptor {\n  /**@ignore */\n  constructor(private dto: ClassConstructor) {}\n  /**@ignore */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        return plainToInstance(this.dto, data, {\n          excludeExtraneousValues: true,\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                This Guard is responsible for check if the request contains a valid jwt or not\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n/**\n * This Guard is responsible for check if the request contains a valid jwt or not\n */\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                defines the strategy used for authenticatin , we are using JWT strategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            you should invoke the super constructor .\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:30\n                \n            \n\n\n            \n                \n                    This method attach the pay load from the JWT to user property in the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * defines the strategy used for authenticatin , we are using JWT strategy\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   *\n   * you should invoke the super constructor .\n   *\n   * @param config\n   */\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  /**\n   * This method attach the pay load from the JWT to user property in the request\n   * @param payload\n   * @returns\n   */\n  async validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MailerModule } from '@nestjs-modules/mailer';\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { MailService } from './services/mail.service';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          service: 'gmail',\n          auth: {\n            type: 'oauth2',\n            user: config.get('EMAIL'),\n            clientId: config.get('CLIENT_ID'),\n            clientSecret: config.get('CLIENT_SECRET'),\n            refreshToken: config.get('REFRESH_TOKEN'),\n          },\n        },\n        defaults: {\n          from: 'Learning Lantern',\n        },\n        template: {\n          dir: './templates',\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: false,\n          },\n        },\n      }),\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/services/mail.service.ts\n        \n\n\n            \n                Description\n            \n            \n                this service is responsible for sending email.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendValidationEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailer: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/services/mail.service.ts:8\n                            \n                        \n\n                \n                    \n                            The mailer service is defined by nestjs when you configure the MailerModule\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailer\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendValidationEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendValidationEmail(userId: string, code: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/services/mail.service.ts:26\n                \n            \n\n\n            \n                \n                    send the validtion email to the user with the given email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        both Id and code are used for validation\n\n                                    \n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        both Id and code are used for validation\n\n                                    \n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the email to which we are sending\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\n\n/**\n * this service is responsible for sending email.\n */\n@Injectable()\nexport class MailService {\n  /**\n   *\n   * The mailer service is defined by nestjs when you configure the MailerModule\n   *\n   * @param mailer\n   */\n  constructor(private readonly mailer: MailerService) {}\n\n  /**\n   *\n   * send the validtion email to the user with the given email\n   *\n   * @param userId both Id and code are used for validation\n   * @param code both Id and code are used for validation\n   * @param email the email to which we are sending\n   * @returns\n   */\n  async sendValidationEmail(\n    userId: string,\n    code: string,\n    email: string,\n  ): Promise {\n    try {\n      return this.mailer.sendMail({\n        to: email,\n        from: 'Learing-Lantern.com',\n        subject: 'Welcome To Learning Lantern',\n        template: 'index', // The `.pug` or `.hbs` extension is appended automatically.\n        context: {\n          // Data to be sent to template engine.\n          user: userId,\n          code: code,\n        },\n      });\n    } catch (error) {\n      throw new InternalServerErrorException(\n        'Internal Server Error(Mail Server Error)',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PayloadI.html":{"url":"interfaces/PayloadI.html","title":"interface - PayloadI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PayloadI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/interfaces/payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                this interface defines What info JWT payload Contains\n\n            \n\n\n\n\n\n    \n\n\n    \n        export interface PayloadI {\n  /**@ignore */\n  userId: string;\n  /**@ignore */\n  userFName: string;\n  /**@ignore */\n  isValidated: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Profile.html":{"url":"entities/Profile.html","title":"entity - Profile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/model/entities/profile.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                this class define the profile table in the database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                FirstName\n                            \n                            \n                                Id\n                            \n                            \n                                LastName\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        FirstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/profile.entity.ts:23\n                        \n                    \n\n            \n                \n                    fistname of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/profile.entity.ts:17\n                        \n                    \n\n            \n                \n                    PK of type number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, length: 60})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/profile.entity.ts:29\n                        \n                    \n\n            \n                \n                    user's last name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.Profile)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/profile.entity.ts:33\n                        \n                    \n\n            \n                \n                    the foreign key with the user table\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { ProfileI } from '../interfaces/profile.interface';\nimport { User } from './user.entity';\n\n/** this class define the profile table in the database */\n@Entity()\nexport class Profile implements ProfileI {\n  /** PK of type number */\n  @PrimaryGeneratedColumn()\n  Id: number;\n  /** fistname of the user */\n  @Column({\n    nullable: false,\n    length: 30,\n  })\n  FirstName: string;\n  /** user's last name */\n  @Column({\n    nullable: false,\n    length: 60,\n  })\n  LastName: string;\n\n  /** the foreign key with the user table */\n  @OneToOne(() => User, (user) => user.Profile)\n  user: User;\n\n  /** make sure to remove extra spaces in the names before insert or else the user can use empty spaces as a name */\n  @BeforeInsert()\n  trimName() {\n    // trim the FirstName and LastName to remove extra spaces\n    this.FirstName = this.FirstName.trim();\n    this.LastName = this.LastName.trim();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/role.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    this guard checks if the request is comming from a user with a valid role or not\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                matchRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/role.guard.ts:10\n                            \n                        \n\n                \n                    \n                            the constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to extract the roles from the metadate\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to check the user role in the database\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/role.guard.ts:25\n                \n            \n\n\n            \n                \n                    if the user has a valid role the he can activate the route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        matchRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    matchRoles(rolesList: number[], role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/role.guard.ts:42\n                \n            \n\n\n            \n                \n                    check if the user role exists in the allowable role list\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rolesList\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { RolesEnum } from 'src/shared/enums/roles.enum';\nimport { UserService } from 'src/user/services/user-service/user.service';\n\n/**\n * this guard checks if the request is comming from a user with a valid role or not\n */\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  /**\n   * the constructor\n   * @param reflector is used to extract the roles from the metadate\n   * @param userService is used to check the user role in the database\n   */\n  constructor(private reflector: Reflector, private userService: UserService) {}\n\n  /**\n   *\n   * if the user has a valid role the he can activate the route\n   *\n   * @param context\n   * @returns\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const dbUser = await this.userService.getUserById(user['userId']);\n    return this.matchRoles(roles, dbUser.role);\n  }\n\n  /**\n   * check if the user role exists in the allowable role list\n   * @param rolesList\n   * @param role\n   * @returns\n   */\n  private matchRoles(rolesList: number[], role: number): boolean {\n    return rolesList.includes(role);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializeInterceptor.html":{"url":"classes/SerializeInterceptor.html","title":"class - SerializeInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializeInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/interceptors/serialize.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                serialize user sensitive data\n\n            \n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  CallHandler,\n  NestInterceptor,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToInstance } from 'class-transformer';\n\n/** makes sure you enter object as argument to the interceptor */\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\n/** custom decorator to use the interceptor */\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\n\n/**\n * serialize user sensitive data\n */\nexport class SerializeInterceptor implements NestInterceptor {\n  /**@ignore */\n  constructor(private dto: ClassConstructor) {}\n  /**@ignore */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        return plainToInstance(this.dto, data, {\n          excludeExtraneousValues: true,\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializePaginatedInterceptor.html":{"url":"classes/SerializePaginatedInterceptor.html","title":"class - SerializePaginatedInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializePaginatedInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/interceptors/serialize-paginated.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                this interceptor is responsible for serializing sensitive data according to the given dto\n\n            \n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  CallHandler,\n  NestInterceptor,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToInstance } from 'class-transformer';\n\n/**\n * this interface makes sure that you enter an object to the serialize decorator\n */\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\n/**\n * Custom Decorator that do serialization\n *\n * @param dto\n * @returns\n */\nexport function SerializePaginated(dto: ClassConstructor) {\n  return UseInterceptors(new SerializePaginatedInterceptor(dto));\n}\n\n/**\n * this interceptor is responsible for serializing sensitive data according to the given dto\n */\nexport class SerializePaginatedInterceptor implements NestInterceptor {\n  /**@ignore */\n  constructor(private dto: ClassConstructor) {}\n  /**@ignore */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        // return plainToInstance(this.dto, data, {\n        //   excludeExtraneousValues: true,\n        // });\n        let result = [];\n        let rawData = data['items'];\n        for (let i of rawData) {\n          console.log(typeof i.Profile);\n          result.push(\n            plainToInstance(this.dto, i, {\n              excludeExtraneousValues: true,\n            }),\n          );\n        }\n        data['items'] = result;\n        return data;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/model/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                this entity defines the user table in the database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                DateCreated\n                            \n                            \n                                Email\n                            \n                            \n                                Id\n                            \n                            \n                                IsConfirmed\n                            \n                            \n                                IsValidated\n                            \n                            \n                                Password\n                            \n                            \n                                role\n                            \n                            \n                                ValidationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        DateCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/user.entity.ts:41\n                        \n                    \n\n            \n                \n                    the data the account was created\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({nullable: false, unique: true, length: 128})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    id is of type uuid\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/user.entity.ts:59\n                        \n                    \n\n            \n                \n                    if the user is confirmed by the university admin or not\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsValidated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/user.entity.ts:53\n                        \n                    \n\n            \n                \n                    if the user's email is validated or not\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, length: 60})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/user.entity.ts:36\n                        \n                    \n\n            \n                \n                    password must contain Uppercase letter+lowercase letter+ numbers and minimum length 8\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/user.entity.ts:65\n                        \n                    \n\n            \n                \n                    the role of the user its number type you can found what this number means in the rolesEnum\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ValidationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 8, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/model/entities/user.entity.ts:47\n                        \n                    \n\n            \n                \n                    validation code check if user entered a real email that he owns\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { RolesEnum } from 'src/shared/enums/roles.enum';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  Index,\n  CreateDateColumn,\n  BeforeInsert,\n  JoinColumn,\n  OneToOne,\n} from 'typeorm';\n\nimport { UserI } from '../interfaces/user.interface';\nimport { Profile } from './profile.entity';\n\n/** this entity defines the user table in the database */\n@Entity()\nexport class User implements UserI {\n  /** id is of type uuid */\n  @Index()\n  @PrimaryGeneratedColumn('uuid')\n  Id: string;\n  @Index()\n  /** email must be unique and lower case */\n  @Column({\n    nullable: false,\n    unique: true,\n    length: 128,\n  })\n  Email: string;\n  /** password must contain Uppercase letter+lowercase letter+ numbers and minimum length 8 */\n  @Column({\n    nullable: false,\n    length: 60,\n  })\n  Password: string;\n  /** the data the account was created */\n  @CreateDateColumn({\n    type: Date,\n  })\n  DateCreated: Date;\n  /** validation code check if user entered a real email that he owns */\n  @Column({\n    length: 8,\n    nullable: false,\n  })\n  ValidationCode: string;\n  /** if the user's email is validated or not */\n  @Column({\n    nullable: false,\n    default: false,\n  })\n  IsValidated: boolean;\n  /** if the user is confirmed by the university admin or not */\n  @Column({\n    nullable: false,\n    default: false,\n  })\n  IsConfirmed: boolean;\n  /**the role of the user its number type you can found what this number means in the rolesEnum */\n  @Column({\n    nullable: false,\n    default: RolesEnum.student,\n  })\n  role: number;\n\n  /** @ignore */\n  @OneToOne(() => Profile, (Profile) => Profile.user)\n  @JoinColumn()\n  Profile: Profile;\n\n  /** makes sure that the email in lower case */\n  @BeforeInsert()\n  emailTolower() {\n    // change the email to lower case\n    this.Email = this.Email.toLowerCase();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controller/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                the user controller contains all routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeEmail\n                            \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                createUser\n                            \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getSingleUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                resendValidtion\n                            \n                            \n                                    Async\n                                updateUserName\n                            \n                            \n                                    Async\n                                validateEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeEmail(Body: LoginDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Serialize(UserSerializeDto)@UseGuards(JwtGuard)@Put('change-email')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:109\n                \n            \n\n\n            \n                \n                    change email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Body\n                                    \n                                            LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(changeDto: changePasswordDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Serialize(UserSerializeDto)@UseGuards(JwtGuard)@Put('change-password')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:96\n                \n            \n\n\n            \n                \n                    update user password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changeDto\n                                    \n                                            changePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUser\n                        \n                    \n                \n            \n            \n                \ncreateUser(createDto: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Serialize(UserSerializeDto)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:46\n                \n            \n\n\n            \n                \n                    create new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAccount(Body: DeleteAccountDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Serialize(UserSerializeDto)@UseGuards(JwtGuard)@Delete('delete')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:118\n                \n            \n\n\n            \n                \n                    delete account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Body\n                                    \n                                            DeleteAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(page, limit)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(RolesEnum.admin, RolesEnum.super)@SerializePaginated(UserSerializeDto)@UseGuards(JwtGuard, RoleGuard)@Get('all')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:56\n                \n            \n\n\n            \n                \n                    get all users paginated\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSingleUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleUser(Id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Serialize(UserSerializeDto)@Get('one/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:71\n                \n            \n\n\n            \n                \n                    get single user by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:87\n                \n            \n\n\n            \n                \n                    login user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                            LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendValidtion\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendValidtion(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('resend-validation')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:139\n                \n            \n\n\n            \n                \n                    resend validation email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserName(updateDto: UpdateDto, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:77\n                \n            \n\n\n            \n                \n                    update user name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateDto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateEmail(validateDto: ValidateEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('validate-email')\n                \n            \n\n            \n                \n                    Defined in src/user/controller/user.controller.ts:131\n                \n            \n\n\n            \n                \n                    validate user email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validateDto\n                                    \n                                            ValidateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { Pagination } from 'nestjs-typeorm-paginate';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { RoleGuard } from 'src/auth/guards/role.guard';\nimport { Roles } from 'src/auth/model/decorators/roles.decorator';\nimport { RolesEnum } from 'src/shared/enums/roles.enum';\nimport { SerializePaginated } from 'src/shared/interceptors/serialize-paginated.interceptor';\nimport { Serialize } from 'src/shared/interceptors/serialize.interceptor';\nimport { DeleteResult } from 'typeorm';\nimport { serialize } from 'v8';\nimport { changePasswordDto } from '../model/dtos/changePassword.dto';\nimport { DeleteAccountDto } from '../model/dtos/delete-account.dto';\nimport { LoginDto } from '../model/dtos/login.dto';\nimport { UserSerializeDto } from '../model/dtos/serialize-dtos/user-serialize.dto';\nimport { CreateDto } from '../model/dtos/signup.dto';\nimport { UpdateDto } from '../model/dtos/update.dto';\nimport { ValidateEmailDto } from '../model/dtos/validate-email.dto';\n\nimport { User } from '../model/entities/user.entity';\nimport { UserHelperService } from '../services/user-helper/user-helper.service';\nimport { UserService } from '../services/user-service/user.service';\n\n/** the user controller contains all routes */\n@Controller('user')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly userHelper: UserHelperService,\n  ) {}\n  /**create new user */\n  @Serialize(UserSerializeDto)\n  @Post('create')\n  createUser(@Body() createDto: CreateDto): Promise {\n    const createInstace = this.userHelper.signupDtoToInstance(createDto);\n    return this.userService.createUser(createInstace);\n  }\n\n  /**get all users paginated */\n  @Roles(RolesEnum.admin, RolesEnum.super)\n  @SerializePaginated(UserSerializeDto)\n  @UseGuards(JwtGuard, RoleGuard)\n  @Get('all')\n  async getAllUsers(\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit,\n  ): Promise> {\n    limit = limit > 50 ? 50 : limit;\n    return this.userService.getAllUsers({\n      limit: limit,\n      page,\n      route: `http://localhost:3000/user/all`,\n    });\n  }\n\n  /**get single user by id */\n  @Serialize(UserSerializeDto)\n  @Get('one/:id')\n  async getSingleUser(@Param('id') Id): Promise {\n    return this.userService.getUserById(Id);\n  }\n\n  /**update user name */\n  @Put('update/:id')\n  async updateUserName(\n    @Body() updateDto: UpdateDto,\n    @Param('id') id,\n  ): Promise {\n    const updateInstace = this.userHelper.updateDtoToInstace(updateDto);\n    return this.userService.updateUserName(id, updateInstace);\n  }\n\n  /**login user */\n  @Post('login')\n  async login(@Body() loginDto: LoginDto): Promise {\n    const loginInstance = this.userHelper.loginDtoToInstance(loginDto);\n    return this.userService.login(loginInstance);\n  }\n\n  /**update user password */\n  @Serialize(UserSerializeDto)\n  @UseGuards(JwtGuard)\n  @Put('change-password')\n  async changePassword(\n    @Body() changeDto: changePasswordDto,\n    @Req() req: any,\n  ): Promise {\n    const changePassInstance =\n      this.userHelper.changePassDtoToInstance(changeDto);\n    return this.userService.changePassword(req.user.userId, changePassInstance);\n  }\n\n  /**change email */\n  @Serialize(UserSerializeDto)\n  @UseGuards(JwtGuard)\n  @Put('change-email')\n  async changeEmail(@Body() Body: LoginDto, @Req() req: any): Promise {\n    let changeEmailInstance = this.userHelper.loginDtoToInstance(Body);\n    return this.userService.changeEmail(req.user.userId, changeEmailInstance);\n  }\n\n  /**delete account */\n  @Serialize(UserSerializeDto)\n  @UseGuards(JwtGuard)\n  @Delete('delete')\n  async deleteAccount(\n    @Body() Body: DeleteAccountDto,\n    @Req() req: any,\n  ): Promise {\n    let deleteAccountInstance =\n      this.userHelper.deleteAccountDtoToInstance(Body);\n    return this.userService.deleteAccount(\n      req.user.userId,\n      deleteAccountInstance,\n    );\n  }\n  /**validate user email */\n  @Post('validate-email')\n  async validateEmail(@Body() validateDto: ValidateEmailDto): Promise {\n    const validateInstance = this.userHelper.validateDtoToInstance(validateDto);\n    return this.userService.validateEmail(validateInstance);\n  }\n\n  /**resend validation email */\n  @UseGuards(JwtGuard)\n  @Get('resend-validation')\n  async resendValidtion(@Req() req: any): Promise {\n    return this.userService.resendValidation(req.user.Id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHelperService.html":{"url":"injectables/UserHelperService.html","title":"injectable - UserHelperService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHelperService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/services/user-helper/user-helper.service.ts\n        \n\n\n            \n                Description\n            \n            \n                this service is just a helper service in the user module that makes sure\nthat the Dtos are transformed to the valid schema used in the api\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePassDtoToInstance\n                            \n                            \n                                deleteAccountDtoToInstance\n                            \n                            \n                                loginDtoToInstance\n                            \n                            \n                                signupDtoToInstance\n                            \n                            \n                                updateDtoToInstace\n                            \n                            \n                                validateDtoToInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changePassDtoToInstance\n                        \n                    \n                \n            \n            \n                \nchangePassDtoToInstance(dto: changePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user-helper/user-helper.service.ts:73\n                \n            \n\n\n            \n                \n                    Transform the ChangePasswordDTo to the ChangePassI (which is the valid schema used in the api)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            changePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ChangePassI\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAccountDtoToInstance\n                        \n                    \n                \n            \n            \n                \ndeleteAccountDtoToInstance(dto: DeleteAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user-helper/user-helper.service.ts:85\n                \n            \n\n\n            \n                \n                    Transform the DeleteAccountDTo to the DeleteAccountI (which is the valid schema used in the api)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            DeleteAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DeleteAccountI\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginDtoToInstance\n                        \n                    \n                \n            \n            \n                \nloginDtoToInstance(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user-helper/user-helper.service.ts:61\n                \n            \n\n\n            \n                \n                    Transform the LoginDTo to the LoginI (which is the valid schema used in the api)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     LoginI\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signupDtoToInstance\n                        \n                    \n                \n            \n            \n                \nsignupDtoToInstance(dto: CreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user-helper/user-helper.service.ts:32\n                \n            \n\n\n            \n                \n                    this function transform the request body from the UserDto schema to the\nthe UserI schema used inside the api.\nusing this apprach gives more flexibility to the front end team to\nupdate the schema of the request body as they want and you will only\nneed to modify the DTO and this Helper function.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateUserI\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDtoToInstace\n                        \n                    \n                \n            \n            \n                \nupdateDtoToInstace(dto: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user-helper/user-helper.service.ts:47\n                \n            \n\n\n            \n                \n                    Transform the UpdateDTo to the UpdateInfoI (which is the valid schema used in the api)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     UpdateInfoI\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateDtoToInstance\n                        \n                    \n                \n            \n            \n                \nvalidateDtoToInstance(dto: ValidateEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user-helper/user-helper.service.ts:95\n                \n            \n\n\n            \n                \n                    Transform the ValidateEmialDTo to the ValidateEmailI (which is the valid schema used in the api)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            ValidateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ValidateEmailI\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { changePasswordDto } from 'src/user/model/dtos/changePassword.dto';\nimport { DeleteAccountDto } from 'src/user/model/dtos/delete-account.dto';\nimport { LoginDto } from 'src/user/model/dtos/login.dto';\nimport { CreateDto } from 'src/user/model/dtos/signup.dto';\nimport { UpdateDto } from 'src/user/model/dtos/update.dto';\nimport { ValidateEmailDto } from 'src/user/model/dtos/validate-email.dto';\nimport { ChangePassI } from 'src/user/model/interfaces/change-password.interface';\nimport { CreateUserI } from 'src/user/model/interfaces/create-user.interface';\nimport { DeleteAccountI } from 'src/user/model/interfaces/delete-account.interface';\nimport { LoginI } from 'src/user/model/interfaces/login.interface';\nimport { UpdateInfoI } from 'src/user/model/interfaces/update-name.interface';\nimport { ValidateEmailI } from 'src/user/model/interfaces/validate-email.interface';\n\n/**\n *\n * this service is just a helper service in the user module that makes sure\n * that the Dtos are transformed to the valid schema used in the api\n *\n */\n@Injectable()\nexport class UserHelperService {\n  /**\n   * this function transform the request body from the UserDto schema to the\n   * the UserI schema used inside the api.\n   * using this apprach gives more flexibility to the front end team to\n   * update the schema of the request body as they want and you will only\n   * need to modify the DTO and this Helper function.\n   * @param dto\n   * @returns\n   */\n  signupDtoToInstance(dto: CreateDto): CreateUserI {\n    return {\n      Email: dto.userEmail,\n      Password: dto.userPassword,\n      FirstName: dto.userFName,\n      LastName: dto.userLName,\n    };\n  }\n\n  /**\n   * Transform the UpdateDTo to the UpdateInfoI (which is the valid schema used in the api)\n   *\n   * @param dto\n   * @returns\n   */\n  updateDtoToInstace(dto: UpdateDto): UpdateInfoI {\n    return {\n      FirstName: dto.userFName,\n      LastName: dto.userLName,\n      Password: dto.userPassword,\n    };\n  }\n\n  /**\n   * Transform the LoginDTo to the LoginI (which is the valid schema used in the api)\n   * @param dto\n   * @returns\n   */\n\n  loginDtoToInstance(dto: LoginDto): LoginI {\n    return {\n      Email: dto.userEmail,\n      Password: dto.userPassword,\n    };\n  }\n\n  /**\n   * Transform the ChangePasswordDTo to the ChangePassI (which is the valid schema used in the api)\n   * @param dto\n   * @returns\n   */\n  changePassDtoToInstance(dto: changePasswordDto): ChangePassI {\n    return {\n      OldPass: dto.oldPassword,\n      NewPass: dto.newPassword,\n    };\n  }\n\n  /**\n   * Transform the DeleteAccountDTo to the DeleteAccountI (which is the valid schema used in the api)\n   * @param dto\n   * @returns\n   */\n  deleteAccountDtoToInstance(dto: DeleteAccountDto): DeleteAccountI {\n    return {\n      Password: dto.userPassword,\n    };\n  }\n  /**\n   * Transform the ValidateEmialDTo to the ValidateEmailI (which is the valid schema used in the api)\n   * @param dto\n   * @returns\n   */\n  validateDtoToInstance(dto: ValidateEmailDto): ValidateEmailI {\n    return {\n      Id: dto.userId,\n      ValidationCode: dto.validationCode,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\n\n\nUserHelperService\n\nUserHelperService\n\nUserModule -->\n\nUserHelperService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserHelperService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MailerModule } from '@nestjs-modules/mailer';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { MailModule } from 'src/mail/mail.module';\n\nimport { UserController } from './controller/user.controller';\nimport { Profile } from './model/entities/profile.entity';\nimport { User } from './model/entities/user.entity';\nimport { UserHelperService } from './services/user-helper/user-helper.service';\nimport { UserService } from './services/user-service/user.service';\n\n@Module({\n  controllers: [UserController],\n  imports: [TypeOrmModule.forFeature([User, Profile]), AuthModule, MailModule],\n  providers: [UserService, UserHelperService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSerializeDto.html":{"url":"classes/UserSerializeDto.html","title":"class - UserSerializeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSerializeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/model/dtos/serialize-dtos/user-serialize.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                the serialze schema of the user data\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { Profile } from '../../entities/profile.entity';\n\n/**\n * the serialze schema of the user data\n */\nexport class UserSerializeDto {\n  /**@ignore */\n  @Expose()\n  Id: string;\n  /**@ignore */\n  @Expose()\n  IsConfirmed: boolean;\n  /**@ignore */\n  @Expose()\n  IsValidated: boolean;\n  /**@ignore */\n  @Expose()\n  @Transform(({ obj }) => obj.Profile)\n  Profile: Profile;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/model/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/model/interfaces/payload.interface.ts\n            \n            interface\n            PayloadI\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/mail/services/mail.service.ts\n            \n            injectable\n            MailService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/serialize-paginated.interceptor.ts\n            \n            class\n            SerializePaginatedInterceptor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/serialize-paginated.interceptor.ts\n            \n            interface\n            ClassConstructor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/serialize-paginated.interceptor.ts\n            \n            function\n            SerializePaginated\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/serialize.interceptor.ts\n            \n            class\n            SerializeInterceptor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/serialize.interceptor.ts\n            \n            interface\n            ClassConstructor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/serialize.interceptor.ts\n            \n            function\n            Serialize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/controller/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/user/model/dtos/serialize-dtos/user-serialize.dto.ts\n            \n            class\n            UserSerializeDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/model/entities/profile.entity.ts\n            \n            entity\n            Profile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/model/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/services/user-helper/user-helper.service.ts\n            \n            injectable\n            UserHelperService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/services/user-service/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (21/21)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.6.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.1\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/typeorm : ^9.0.0-next.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            handlebars : ^4.7.7\n        \n            joi : ^17.6.0\n        \n            nestjs-typeorm-paginate : ^4.0.1\n        \n            nodemailer : ^6.7.5\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RolesEnum   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        RolesEnum\n                    \n                \n                        \n                            \n                                 super\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 admin\n                            \n                        \n                        \n                            \n                                 instructor\n                            \n                        \n                        \n                            \n                                 student\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            Serialize   (src/.../serialize.interceptor.ts)\n                        \n                        \n                            SerializePaginated   (src/.../serialize-paginated.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    This is the entry point of the application\n\n\n                \n            \n        \n    \n    src/shared/interceptors/serialize.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Serialize\n                        \n                    \n                \n            \n            \n                \nSerialize(dto: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n                    custom decorator to use the interceptor\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/shared/interceptors/serialize-paginated.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SerializePaginated\n                        \n                    \n                \n            \n            \n                \nSerializePaginated(dto: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n                    Custom Decorator that do serialization\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n Learning Lantern  is An Online Eductaional Environment, with an integrated and easy-to-use set of cloud services and content creation tools for leveraging the online eductaional process\n\n\n\n\nIntroduction\nThis is short description for the Learning Lantern auth-api.\nMore detailed Information can be found in the link to documentation below\n\n\nHTTP end points\n\n  \n    Route\n    Description\n  \n  \n    POST /user/signup\n    \n        Create new User \n    \n  \n  \n    POST /user/login\n    \n        Login an existing user \n    \n  \n  \n    GET /user/all?page=number&limit=number>\n    \n        Get all users paginated \n        page = the page number\n        limit = how many user displayed per page\n    \n  \n   \n    GET /user/validate-email?`id= {userId}\n\n    \n        Send a validation email to the user with the given id\n        Note: \n    \n  \n\n\nDatabase\n\n  \n\n\nDeployment Link\n\n- This API is hosted on Heroku here\n\nDocs Link\n- a Detailed Docs for the API generated with compodocs can be found here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nUserHelperService\n\nUserHelperService\n\nUserModule -->\n\nUserHelperService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/model/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: number[]) => SetMetadata('roles', roles)\n                    \n                \n\n            \n                \n                    This decorator add alist of allowed roles to the metadata of the request\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
